# Puppet and RightScale Integration Libraries

This module provides a standard and secure way of bootstrapping hosts in
RightScale while using Puppet as your configuration management tool. The
module includes the following components:

 * Puppet Plugin: RightScale Facter Plugin
 * Puppet Plugin: RightScale Tagger Plugin
 * Puppet Plugin: Autosign Approver
 * *TODO*: RightScale Cookbook: Puppet Bootstrap

## RightScale Facter Plugin

The [rs-facts.rb](lib/facter/rs-facts.rb) gathers facts from RightScale
managed hosts through both local files and the live RightScale 1.5 API.
In the event that your host is not a RightScale-managed host, the plugin
fails quickly and silently.

### Installation Requirements

 * Ruby Gem: [right\_api\_client](https://github.com/rightscale/right_api_client)

   Puppet automatically copies over all plugins from the master to clients
   at the beginning of each run. The first time this plugin is loaded, it
   checks for the presence of the gem. If the gem is not installed, it never
   tries again to load it. Due to this behavior of Facter, you must have the
   `right_api_client` gem installed during your pre-puppet boot scripts.

   *Note*: This is done by the RightScale Cookbook, if you use it.

### Facts Gathered

This plugin pulls facts from two sources. The local
`/var/spool/cloud/user-data.dict` file installed by the RightLink agent, and
the native RightScale API. In both cases, the facts returned are dynamically
generated. This is a brief list of the facts you can resasonably expect to
see ... but these facts may change if RightScale changes the data that they
expose at any point in the future.

#### /var/spool/cloud/user-data.dict facts:

These facts are loaded one time and are expected to not change during the
runtime of the Puppet daemon. They are likely set at the instantiation time
of the instance itself, and never change.

*Note*: The `rs_api_token` fact is used as the credentials for the next
phase of the plugin (accessing the API).

 * `rs_account`: RightScale Account Number
 * `rs_api_token`: RightScale Account Number and matching Instance API Token
 * `rs_api_url`: Host Instance API URL
 * `rs_rn_auth`: RightScale Instance API Token
 * `rs_rn_host`: Remote RightScale Communication Broker Host
 * `rs_rn_id`: RightScale Internal Instance ID
 * `rs_rn_url`: Remote RightScale Communication Broker Host URL
 * `rs_server`: RightScale Remote Cloud URL
 * `rs_sketchy`: RightScale Monitoring (*collectd*) Endpoint

#### RightScale API-Gathered Facts

The `right_api_client` gem is used to reach out to the RightScale API and
gather as many facts about the host as possible. The plugin gathers local
instance data, server launch inputs, server HREF links, and finally it pulls
the current tags associated with a host.

*TODO*: Gather facts from the deployment a host is in as well.

*Note*: The design around Facter plugins is that you provide the plugin a set list
of *facts* and then for each fact, you provide a *method* for getting that
facts updated data. With most facts (like *memfree*), getting this data
on each Puppet run is simple and fast. With remote-accessed Facts though,
this can be tricky. Especially when these facts have the ability to change
during a servers lifetime (for example, updated RightScale tags).

To combat this, this plugin keeps a cache of all of the fact data with an
extremely short TTL. Each fact defined (by the *Facter.add* method) is given
a *get fact from cache* method that can be called as often as necessary. This
method checks the age of the cache, and either returns the cached data or
calls out to the RightScale API for updated data.

##### Instance Facts:

 * `rs_created_at`
 * `rs_link_alerts`
 * `rs_link_cloud`
 * `rs_link_datacenter`
 * `rs_link_deployment`
 * `rs_link_image`
 * `rs_link_inputs`
 * `rs_link_instance_type`
 * `rs_link_kernel_image`
 * `rs_link_monitoring_metrics`
 * `rs_link_multi_cloud_image`
 * `rs_link_parent`
 * `rs_link_server_template`
 * `rs_link_ssh_key`
 * `rs_link_volume_attachments`
 * `rs_monitoring_id`
 * `rs_monitoring_server`
 * `rs_name`
 * `rs_pricing_type`
 * `rs_private_dns_names_0`
 * `rs_private_ip_addresses_0`
 * `rs_public_dns_names_0`
 * `rs_public_ip_addresses_0`
 * `rs_resource_uid`
 * `rs_state`
 * `rs_updated_at`
 * `rs_user_data`

##### Server Tags:

Every tag directly associated with a host is added with the `rs_tag_` prefix.
Tag names undergo a bit of a transformation to be more *Puppet-friendly*
(colons replaced with underscores, all text lowercased, etc). Here are some
example tag names:

 * `rs_tag_rs_login_state`
 * `rs_tag_rs_monitoring_state`

##### Instance Inputs:

Every *server input* provided to the boot scripts is provided here similarly
to how the Tag names are. Slashes, colons and other funny characters are
stripped or munged. Example facts look like this:

 * `rs_input_sys_swap_file`
 * `rs_input_sys_swap_size`

## RightScale Tagger Plugin

This plugin allows the Puppet client agent on a server to tag itself in
RightScale using the `rs_tag` command. Usage is very simple, and enforces
the RightScale requirements described here:

  http://support.rightscale.com/12-Guides/RightScale_101/06-Advanced_Concepts/Tagging

### Example Usage

Creating some tags:

    rs_tag { 'MyTag': ensure => 'present' }
    rs_tag { 'MyTag::State': value => 'XYZ' }

Destroying tags:

    rs_tag { 'MyTag': ensure => 'absent' }
